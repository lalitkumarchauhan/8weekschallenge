<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="G:/0000VH/SQL/LI_DANNY_practici/dannys_diner.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="539"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainmembers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="members" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="78"/><column index="2" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="menu" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="87"/><column index="3" value="35"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sales" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="2" mode="0"/></sort><column_widths><column index="1" value="78"/><column index="2" value="69"/><column index="3" value="73"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="dannySQL.sql">-- INSERT INTO sales
--   (&quot;customer_id&quot;, &quot;order_date&quot;, &quot;product_id&quot;)
-- VALUES
--   ('A', '2021-01-01', '1'),
--   ('A', '2021-01-01', '2'),
--   ('A', '2021-01-07', '2'),
--   ('A', '2021-01-10', '3'),
--   ('A', '2021-01-11', '3'),
--   ('A', '2021-01-11', '3'),
--   ('B', '2021-01-01', '2'),
--   ('B', '2021-01-02', '2'),
--   ('B', '2021-01-04', '1'),
--   ('B', '2021-01-11', '1'),
--   ('B', '2021-01-16', '3'),
--   ('B', '2021-02-01', '3'),
--   ('C', '2021-01-01', '3'),
--   ('C', '2021-01-01', '3'),
--   ('C', '2021-01-07', '3');
--   
--   INSERT INTO menu
--   (&quot;product_id&quot;, &quot;product_name&quot;, &quot;price&quot;)
-- VALUES
--   ('1', 'sushi', '10'),
--   ('2', 'curry', '15'),
--   ('3', 'ramen', '12');
--   
--   INSERT INTO members
--   (&quot;customer_id&quot;, &quot;join_date&quot;)
-- VALUES
--   ('A', '2021-01-07'),
--   ('B', '2021-01-09');

-- What is the total amount each customer spent at the restaurant?
-- SELECT mbrs.customer_id, sum(m.price) as cust_spend 
-- FROM members mbrs 
-- JOIN sales s 
-- on mbrs.customer_id = s.customer_id
-- JOIN menu m
-- on s.product_id = m.product_id
-- GROUP by mbrs.customer_id;

-- How many days has each customer visited the restaurant?

-- SELECT s.customer_id, count(s.order_date) from sales s GROUP by s.customer_id;

-- What was the first item from the menu purchased by each customer?
-- SELECT s.customer_id, m.product_name 
-- FROM sales s
-- JOIN
-- menu m
-- on s.product_id = m.product_id
-- WHERE s.order_date 
-- in (SELECT min(s.order_date) FROM sales s)
-- GROUP by s.customer_id;

-- What is the most purchased item on the menu and how many times was it purchased by all customers?

-- SELECT s.product_id, m.product_name, count(s.order_date) as Order_frequency
-- from 
-- sales s 
-- JOIN menu m
-- on
-- s.product_id = m.product_id
-- GROUP by s.product_id
-- ORDER by Order_frequency DESC 
-- limit 1;


-- Which item was the most popular for each customer?
-- SELECT s.customer_id, m.product_name, count(s.order_date) as Order_frequency
-- from 
-- sales s
-- JOIN menu m
-- on
-- s.product_id = m.product_id
-- GROUP by s.customer_id
-- ORDER by Order_frequency DESC;

-- Which item was purchased first by the customer after they became a member?
-- SELECT s.customer_id, mb.join_date, m.product_name 
-- FROM sales s 
-- JOIN menu m
-- on s.product_id = m.product_id
-- JOIN members mb
-- on s.customer_id = mb.customer_id
-- GROUP by s.customer_id
-- ORDER by mb.join_date;
-- 
-- Which item was purchased just before the customer became a member?
-- SELECT s.customer_id, s.order_date, m.product_name 
-- FROM sales s 
-- JOIN menu m
-- on s.product_id = m.product_id
-- JOIN members mb
-- on s.customer_id = mb.customer_id
-- GROUP by s.customer_id
-- HAVING mb.join_date &gt; s.order_date;

--What is the total items and amount spent for each member before they became a member?
-- SELECT s.customer_id, count(m.product_name) as number_of_Items_purchased, sum(m.price) as amount_spent
-- from menu m 
-- JOIN sales s
-- on s.product_id = m.product_id
-- JOIN members mb
-- on s.customer_id = mb.customer_id 
-- GROUP by s.customer_id
-- HAVING mb.join_date &gt; s.order_date;

--If each $1 spent equates to 10 points and sushi has a 2x points multiplier - 
--how many points would each customer have?
-- SELECT s.customer_id,
-- CASE m.product_name
-- WHEN  &quot;sushi&quot;
-- THEN 20*(m.price)
-- ELSE 10*(m.price)
-- END points
-- FROM sales s JOIN menu m
-- on s.product_id = m.product_id
-- GROUP by s.customer_id;

-- In the first week after a customer joins the program (including their join date) 
-- they earn 2x points on all items, not just sushi - how many points do customer A and B 
-- have at the end of January?

-- SELECT s.customer_id,
-- CASE s.order_date
-- WHEN s.order_date BETWEEN mb.join_date AND mb.join_date + 7
-- THEN 20*(m.price)
-- ELSE 10*(m.price)
-- END points
-- FROM sales s JOIN menu m
-- on s.product_id = m.product_id
-- JOIN members mb
-- on s.customer_id = mb.customer_id
-- GROUP by s.customer_id;</sql><current_tab id="0"/></tab_sql></sqlb_project>
